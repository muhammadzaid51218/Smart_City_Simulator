# Capstone Project: Smart City Simulator

 Objective

Build a simulation of a smart city where students design classes for different city components (buildings, vehicles, traffic lights, citizens, energy grid, etc.), making them interact with each other using OOP and Python concepts.

This project mimics real-world systems design — perfect for CS students.
Project Design
1. Core Classes

Building

Attributes: name, type (residential, commercial, hospital, school).

Methods: supply_power(), consume_energy().

Dunder:

__str__ → show building info.

__eq__ → compare buildings by type or energy use.

Citizen

Attributes: name, age, job, home (Building).

Methods: go_to_work(), pay_bill(), use_transport().

Dunder:

__len__ → return citizen’s age.

__call__ → interact with citizen (e.g., citizen("work")).

Vehicle

Attributes: type (car, bus, bike, EV), fuel, speed.

Methods: move(), refuel().

Dunder:

__add__ → combine trips (carpool).

__sub__ → reduce fuel when used.

TrafficLight

Attributes: location, state (red, yellow, green).

Methods: change_state().

Dunder:

__str__ → show current state.

City

Attributes: list of buildings, citizens, vehicles, traffic lights.

Methods: add_entity(), simulate_day(), report().

Dunder:

__getitem__ → access elements by index.

__contains__ → check if an entity exists.

__iter__ → iterate over all entities.

__len__ → total number of entities.
# Key Features

Citizens live in buildings, travel using vehicles, follow traffic lights.

Energy grid supplies buildings → simulate power consumption.

Operator overloading for natural interactions (e.g., bus + car → shared ride).

Use exceptions (e.g., no fuel, blackout, traffic jam).

Use file handling: save/load city state (JSON).

Use inheritance:

Vehicles → Car, Bus, EV.

Buildings → House, Mall, Hospital.

Citizens → Student, Doctor, Engineer.
Example Interface of your Project Code Demo
# Create city
city = City("Smartville")

# Add buildings
b1 = Building("Central Hospital", "hospital")
b2 = Building("Green Apartments", "residential")
city.add_entity(b1)
city.add_entity(b2)

# Add citizens
c1 = Citizen("Ali", 25, "Engineer", b2)
c2 = Citizen("Sara", 30, "Doctor", b1)
city.add_entity(c1)
city.add_entity(c2)

# Add vehicles
v1 = Vehicle("Car", fuel=100, speed=60)
v2 = Vehicle("Bus", fuel=200, speed=40)
city.add_entity(v1)
city.add_entity(v2)

# Simulation
c1.go_to_work(v1)      # Ali drives car
c2.go_to_work(v2)      # Sara takes bus
print(len(c1))         # Age of citizen
print(v1 - 20)         # Fuel reduced
print(v1 + v2)         # Carpooling

# Traffic light
light = TrafficLight("Main Road")
print(light)           # Red
light.change_state()
print(light)           # Green

# Extensions for Students

Add public transport scheduling.

Add emergencies (hospital usage, traffic jams).

Add economy system (salary, bills, taxes).

Add sustainability (solar power, electric vehicles).
Reading Assignment

[Python OOP](https://realpython.com/python3-object-oriented-programming/)

[Principals of OOP ](https://www.geeksforgeeks.org/python-oops-concepts/)
